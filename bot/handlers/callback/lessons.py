from aiogram import F
from aiogram.filters import and_f
from aiogram.dispatcher.router import Router
from aiogram.filters.callback_data import CallbackData, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.types import (ReplyKeyboardRemove,
                           InlineKeyboardButton,
                           InlineKeyboardMarkup)

from keyboards.inline import (get_lesson_data_inline_kb,
                              get_lesson_commiting_kb,
                              get_subject_lessons_kb,
                              get_edit_lesson_kb)
from models.lesson import Lesson
from services.lesson import LessonsService
from services.exceptions.lessons import (CompliteLessonDateUncorrect,
                                         StudentBalanceEmpty)
from handlers.states import lessons as lessons_states

from ..callback.utils import data
from ..common.utils.messages import generate_lesson_data_message_text
from ..providers import provide_model_service
from ..replies import LESSON_DATA_MESSAGE

router = Router(name=__name__)


def update_drop_lessons_kb(keyboard: list[list[InlineKeyboardButton]]):
    for row_n, row in enumerate(keyboard):
        for i_n, i in enumerate(row):
            if "lesson-drop" in i.callback_data:
                keyboard[row_n][i_n].text = "‚õî –£–¥–∞–ª–∏—Ç—å —É—Ä–æ–∫ (-–∏)" \
                    if i.text == "‚ùé –ì–æ—Ç–æ–≤–æ" \
                    else "‚ùé –ì–æ—Ç–æ–≤–æ"
                break

    return keyboard


@router.callback_query(data.ShowLessonInfoData.filter(
    F.lesson_id != None
))
@provide_model_service(LessonsService)
async def show_lesson(
        query: CallbackQuery,
        callback_data: data.ShowLessonInfoData,
        state: FSMContext,
        lessons_service: LessonsService):
    lessons_service.lesson_id = callback_data.lesson_id

    state_ = await state.get_state()

    if state_ == lessons_states.DropLessonsForm.drop_lesson:
        try:
            await lessons_service.drop(worker_id=query.message.chat.id)
        except Exception as e:
            return await query.answer("‚ö† –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å ‚ö†")
        else:
            return await query.answer(text="‚úÖ –£–¥–∞–ª–∏–ª–∏! ‚úÖ")

    try:
        worker_id = (callback_data.seller_id
            if callback_data.seller_view
            else query.message.chat.id)

        print("ABCD", worker_id, callback_data.seller_id, query.message.chat.id)

        lesson: Lesson = await lessons_service.retrieve(
            worker_id=worker_id
        )
    except Exception as e:
        print(e)
        return await query.answer("–ù–µ–ª—å–∑—è –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —ç—Ç–æ—Ç —É—Ä–æ–∫!")
    else:
        await query.answer()

    await query.bot.edit_message_text(
        text=generate_lesson_data_message_text(
            template=LESSON_DATA_MESSAGE,
            lesson=lesson
        ),
        message_id=query.message.message_id,
        chat_id=query.message.chat.id,
        reply_markup=get_lesson_data_inline_kb(
            subject_id=lesson.subject_id,
            lesson_id=lesson.id,
            seller_view=callback_data.seller_view
        )
    )


@router.callback_query(data.AddLessonData.filter())
async def add_lesson(
        query: CallbackQuery,
        callback_data: data.AddLessonData,
        state: FSMContext):
    await query.answer()

    await state.set_state(state=lessons_states.LessonCreationForm.add_datetime)
    await state.set_data(data=dict(subject_id=callback_data.subject_id))

    await query.bot.send_message(
        chat_id=query.message.chat.id,
        text="‚è∞ <b>–ö–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è?</b>\n\n"
             "<i>–§–æ—Ä–º—ã—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ: 31.01 12:30</i>"
    )


@router.callback_query(data.LessonCommitViewCallbackData.filter())
@provide_model_service(LessonsService)
async def lesson_creation_form_action(
        query: CallbackQuery,
        callback_data: data.LessonCommitViewCallbackData,
        state: FSMContext,
        lessons_service: LessonsService):
    action = [i for i in dir(callback_data) if i[0] != "_" and (getattr(callback_data, i) is True)].pop()

    data_: dict = await state.get_data()

    match action:
        case "commit_lesson":
            try:
                factor = dict(await state.get_data()).get("factor", 1)

                await lessons_service.repository.bulk_create_lessons(
                    lesson_data=dict(
                        date=data_.get("datetime"),
                        duration=data_.get("duration"),
                        is_free=data_.get("is_free", False),
                        subject_id=data_.get("subject_id")
                    ),
                    copies=int(factor)
                )
            except Exception as e:
                print(e)
                return await query.message.edit_text(
                    text="‚≠ï <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É—Ä–æ–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!</b>")

            await query.message.edit_reply_markup()

            await query.message.edit_text(
                text="‚úÖ <b>–£—Ä–æ–∫ —Å–æ–∑–¥–∞–Ω</b>",
            )

        case "make_free":
            await state.set_data(
                data=data_ | dict(is_free=not data_.get("is_free"))
            )

            await query.message.edit_reply_markup(
                reply_markup=get_lesson_commiting_kb(
                    is_free=not data_.get("is_free"),
                    is_scheduled=data_.get("is_scheduled")
                )
            )

        case "make_scheduled":
            await query.answer(f"–ü–æ–≤—Ç–æ—Ä–∏–ª–∏ —É—Ä–æ–∫ {callback_data.schedule_factor} —Ä–∞–∑.")

            await state.set_data(data=(await state.get_data()) | {
                "factor": callback_data.schedule_factor
            })

            await query.message.edit_reply_markup(
                reply_markup=get_lesson_commiting_kb(
                    is_free=data_.get("is_free"),
                    is_scheduled=True
                )
            )


@router.callback_query(data.DropLessonData.filter(F.many == True))
async def drop_lesson_bulk(
        query: CallbackQuery,
        callback_data: data.DropLessonData,
        state: FSMContext):
    state_ = await state.get_state()

    if state_ == lessons_states.DropLessonsForm.drop_lesson:
        updated_kb = update_drop_lessons_kb(
            keyboard=query.message.reply_markup.inline_keyboard
        )

        await query.answer("–£–¥–∞–ª–∏–ª–∏, –ø–µ—Ä–µ–∑–∞–π–¥–∏—Ç–µ –∏ —É–≤–∏–¥–∏—Ç–µ!")

        await query.message.edit_reply_markup(
            reply_markup=InlineKeyboardMarkup(inline_keyboard=updated_kb)
        )

        await state.clear()
    else:
        updated_kb = update_drop_lessons_kb(
            keyboard=query.message.reply_markup.inline_keyboard
        )

        try:
            await query.message.edit_reply_markup(
                reply_markup=InlineKeyboardMarkup(inline_keyboard=updated_kb)
            )
        except:
            pass

        await state.set_state(lessons_states.DropLessonsForm.drop_lesson)


@router.callback_query(
    and_f(
        data.DropLessonData.filter(F.many == False),
        data.DropLessonData.filter(F.lesson_id != None)
    )
)
@provide_model_service(LessonsService)
async def drop_lesson_datailed(
        query: CallbackQuery,
        callback_data: data.DropLessonData,
        state: FSMContext,
        lessons_service: LessonsService):
    lessons_service.lesson_id = callback_data.lesson_id

    try:
        await lessons_service.drop(worker_id=query.message.chat.id)
    except:
        return await query.answer("‚ö† –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å ‚ö†")
    else:
        await query.answer("‚úÖ –£–¥–∞–ª–∏–ª–∏! ‚úÖ")


@router.callback_query(data.LessonCompliteData.filter())
@provide_model_service(LessonsService)
async def complete_lesson(
        query: CallbackQuery,
        callback_data: data.LessonCompliteData,
        state: FSMContext,
        lessons_service: LessonsService):
    lessons_service.lesson_id = callback_data.lesson_id

    bot, chat_id = query.bot, query.message.chat.id

    try:
        result = await lessons_service.complete_lesson(
            worker_id=chat_id
        )
    except CompliteLessonDateUncorrect:
        return await query.answer("‚ö† –í—Ä–µ–º—è —É—Ä–æ–∫–∞ –µ—â–µ –Ω–µ –ø–æ–¥–æ—à–ª–æ ‚ö†")
    except PermissionError:
        return await query.answer("‚ö† –ö–∞–∂–µ—Ç—Å—è —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ ‚ö†")
    except StudentBalanceEmpty:
        await query.answer()

        await query.bot.send_message(
            chat_id=chat_id,
            text="‚ö† <b>–£ —É—á–µ–Ω–∏–∫–∞ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –±–∞–ª–∞–Ω—Å–∞</b>\n\n"
                 "–£—Ä–æ–∫ –ø—Ä–æ–≤–µ—Å—Ç–∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è, "
                 "–ª–∏–±–æ —Å–¥–µ–ª–∞–π—Ç–µ —É—Ä–æ–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º, –ª–∏–±–æ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —É—á–µ–Ω–∏–∫–æ–º!"
        )

        return
    except Exception as e:
        return await query.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É")
    else:
        await query.answer()

    try:
        await bot.send_message(
            chat_id=result.subject.student_id,
            text="üîÜ <b>–í—ã –ø–æ—Å–µ—Ç–∏–ª–∏ –µ—â–µ –æ–¥–∏–Ω —É—Ä–æ–∫</b>\n"
                 "–î–≤–∏–≥–∞–π—Ç–µ—Å—å –≤ —Ç–æ–º –∂–µ "
                 "—Ç–µ–º–ø–µ –∏ –≤—ã –¥–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ –≤—Å–µ—Ö —Ü–µ–ª–µ–π!\n"
                 "<i>–ü—Ä–∏ –ª—é–±—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö –ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É - /support</i>"
        )
    except:
        pass

    if result.for_paid and result.offer:
        await bot.send_message(
            chat_id=result.seller_id,
            text="üí∏ <b>–ù–æ–≤–æ–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –ø–æ –ø—Ä–æ–¥–∞–Ω–Ω–æ–º—É —É—á–µ–Ω–∏–∫—É</b>\n"
                 f"–ü—Ä–µ–¥–º–µ—Ç ‚Äî {result.subject.title}\n"
                 f"–£—á–µ–Ω–∏–∫ ‚Äî {result.subject.student.name} | "
                 f"{result.subject.student.city}\n"
                 f"<b>{result.offer.paid_sum}‚ÇΩ / {result.offer.cost}‚ÇΩ</b>\n"
        )

        if result.paid_total_now:
            await bot.send_message(
                chat_id=chat_id,
                text="‚ú® <b>–í—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤—ã–ø–ª–∞—Ç–∏–ª–∏ —É—á–µ–Ω–∏–∫–∞ —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ "
                     "–µ–≥–æ –ø—Ä–æ–¥–∞–≤–∞—Ç—å –∏ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã!</b>"
            )

            await bot.send_message(
                chat_id=result.seller_id,
                text="üî• <b>–£—á–µ–Ω–∏–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–ø–ª–∞—á–µ–Ω!</b>"
            )
        else:
            await bot.send_message(
                chat_id=chat_id,
                text="‚≠ê <b>–í—ã –æ–ø–ª–∞—Ç–∏–ª–∏ –µ—â–µ —á–∞—Å—Ç—å!</b>"
            )
    else:
        await bot.send_message(
            chat_id=chat_id,
            text="üîÜ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –µ—â–µ –æ–¥–Ω–∏–º –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã–º —É—Ä–æ–∫–æ–º!</b>"
        )

    if result.low_balance_student:
        await bot.send_message(
            chat_id=result.subject.student_id,
            text="üìõ <b>–í–∏–¥–∏–º, —á—Ç–æ —É –≤–∞—Å –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –±–∞–ª–∞–Ω—Å</b>\n"
                 "–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–∫–∞ –ø–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –≤–Ω–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É, <b>—Å–ø–∞—Å–∏–±–æ</b>ü§ç!"
        )

        await bot.send_message(
            chat_id=chat_id,
            text="üìõ <b>–£ —É—á–µ–Ω–∏–∫–∞ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ —É—Ä–æ–∫–∏!</b>"
        )


@router.callback_query(data.EditLessonData.filter())
async def edit_lesson(
        query: CallbackQuery,
        callback_data: data.EditLessonData,
        state: FSMContext):
    await query.answer()

    if callback_data.open_menu:
        return await query.message.edit_reply_markup(
            reply_markup=get_edit_lesson_kb(
                lesson_id=callback_data.lesson_id,
                subject_id=callback_data.subject_id
            )
        )

    elif callback_data.edit_record_link:
        await state.set_state(state=lessons_states.EditLessonDataForm().edit_record_link)

        await query.message.bot.send_message(
            chat_id=query.message.chat.id,
            text="üé• –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–ø–∏—Å—å:"
        )

    elif callback_data.edit_date:
        await state.set_state(state=lessons_states.EditLessonDataForm().edit_datetime)

        await query.message.bot.send_message(
            chat_id=query.message.chat.id,
            text="üìÜ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è:"
        )

    await state.set_data(data=dict(lesson_id=callback_data.lesson_id))
