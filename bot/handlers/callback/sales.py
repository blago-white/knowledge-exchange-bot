from aiogram import F
from aiogram.filters import and_f
from aiogram.dispatcher.router import Router
from aiogram.filters.callback_data import CallbackData, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.types import (ReplyKeyboardRemove,
                           InlineKeyboardButton,
                           InlineKeyboardMarkup)

from keyboards.inline import (get_selled_list_inline_kb,
                              get_accept_sell_offer_kb)
from models.worker import Worker
from models.lesson import Subject
from services.worker import WorkersService
from services.lesson import SubjectsService

from ..callback.utils import data
from ..common.utils.messages import generate_lesson_data_message_text
from ..providers import provide_model_service
from ..replies import LESSON_DATA_MESSAGE
from handlers.states import sales as sales_states

router = Router(name=__name__)


@router.callback_query(data.MakeWithdrawData.filter())
async def make_withdraw(
        query: CallbackQuery,
        callback_data: data.ShowLessonInfoData,
        state: FSMContext):
    await query.answer("–£–∂–µ –¥–µ–ª–∞–µ–º —ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª!")


@router.callback_query(data.SelledStudentsList.filter())
@provide_model_service(WorkersService)
async def view_sold(
        query: CallbackQuery,
        callback_data: data.ShowLessonInfoData,
        state: FSMContext,
        workers_service: WorkersService):
    selled = await workers_service.get_selled_students()

    await query.message.edit_text(
        text="‚öú <b>–í–∞—à–∏ –ø—Ä–æ–¥–∞–∂–∏:</b>" if len(
            selled) else "‚öú <b>–ü—Ä–æ–¥–∞–∂ –µ—â–µ –Ω–µ –±—ã–ª–æ :(</b>",
        reply_markup=get_selled_list_inline_kb(selled=selled)
    )


@router.callback_query(data.SellStudentData.filter())
async def sell_student(
        query: CallbackQuery,
        callback_data: data.SellStudentData,
        state: FSMContext):
    await state.set_state(sales_states.SellStudentForm.enter_recipient_id)

    await state.set_data(data=dict(subject_id=callback_data.subject_id))

    await query.bot.send_message(
        chat_id=query.message.chat.id,
        text="üë§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ <i>telegram id</i> –ø–æ–ª—É—á–∞—Ç–µ–ª—è —É—á–µ–Ω–∏–∫–∞"
    )


@router.callback_query(data.SellApprovationData.filter())
@provide_model_service(WorkersService, SubjectsService)
async def commit_sell_offer_sending(
        query: CallbackQuery,
        callback_data: data.SellApprovationData,
        state: FSMContext,
        workers_service: WorkersService,
        subjects_service: SubjectsService):
    if callback_data.approve:
        data_: dict = await state.get_data()

        subjects_service.subject_id = data_.get("subject_id")

        try:
            offer = await workers_service.sell_student(
                buyer_worker_id=data_.get("recipient_id"),
                subject_id=subjects_service.subject_id,
                cost=data_.get("cost")
            )
        except Exception as e:
            print(e)
            await query.message.edit_text(
                text="‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫("
            )
        else:
            subject: Subject = await subjects_service.repository.get(
                pk=subjects_service.subject_id
            )

            await query.bot.send_message(
                chat_id=data_.get("recipient_id"),
                text="üî•üî•üî• <b>–í–∞–º –ø—Ä–∏—à–ª–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –ø–æ–∫—É–ø–∫—É —É—á–µ–Ω–∏–∫–∞!</b>\n"
                     f"–£—á–µ–Ω–∏–∫ ‚Äî {subject.student.name} [{subject.student.city}]\n"
                     f"–ü—Ä–µ–¥–º–µ—Ç ‚Äî {subject.title}\n"
                     f"<i>{subject.description or "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –∑–∞–¥–∞–Ω–æ"}</i>\n\n"
                     f"–û —É—á–µ–Ω–∏–∫–µ ‚Äî {subject.student.description}\n\n"
                     f"<b>–°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂–∏ ‚Äî {offer.cost}, –æ–ø–ª–∞—Ç–∞ –∑–∞ —á–∞—Å: {subject.rate}</b>",
                reply_markup=get_accept_sell_offer_kb(
                    offer_id=offer.subject_id
                )
            )

            await query.message.edit_text(
                text="‚úî <b>–û—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ –ø–æ–∫—É–ø–∫–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é</b>, "
                     "—Ç–µ–ø–µ—Ä—å –∂–¥–µ–º –∫–æ–≥–¥–∞ –µ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–¥—è—Ç, "
                     "–∞ —Å—Ç–∞—Ç—É—Å –ª–∏–¥–∞ —Å–º–æ—Ç—Ä–∏—Ç–µ –≤ "
                     "–ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö —É—á–µ–Ω–∏–∫–∞—Ö –≤ –º–µ–Ω—é!"
            )
    else:
        await query.message.edit_text(
            text="‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ"
        )

    await state.clear()


@router.callback_query(data.SellOfferAcceptingData.filter(
    F.offer_id != None
))
@provide_model_service(WorkersService)
async def set_accept_value_sell_offer(
        query: CallbackQuery,
        callback_data: data.SellOfferAcceptingData,
        state: FSMContext,
        workers_service: WorkersService):
    await query.message.edit_reply_markup()

    try:
        offer = await workers_service.accept_sell_offer(
            subject_id=callback_data.offer_id,
            accept=callback_data.accept
        )
    except Exception as e:
        print(e)

        return await query.message.edit_text(
            text="‚ùå <b>–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ "
                 "–ø–æ–¥–¥–µ—Ä–∂–∫—É –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–µ–ª–∏ –ø—Ä–∏–Ω—è—Ç—å –æ—Ñ—Ñ–µ—Ä</b>",
        )
    if callback_data.accept:
        await query.message.edit_text(
            text="‚úÖ <b>–í—ã –ø–æ–ª—É—á–∏–ª–∏ —É—á–µ–Ω–∏–∫–∞, –æ–Ω –ø–æ—è–≤–∏–ª—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ *–ú–æ–∏ —É—á–µ–Ω–∏–∫–∏*</b>\n"
                 "–ü—Ä–æ–≤–æ–¥–∏—Ç–µ —É—Ä–æ–∫–∏, "
                 "–∏ –æ–ø–ª–∞—á–∏–≤–∞–π—Ç–µ —É—á–µ–Ω–∏–∫–∞, –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –æ–ø–ª–∞—Ç—ã –≤—ã —Å–º–æ–∂–µ—Ç–µ:\n"
                 "- –ü—Ä–æ–¥–∞—Ç—å —É—á–µ–Ω–∏–∫–∞\n"
                 "- –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã —É—á–µ–Ω–∏–∫–∞\n"
        )
        await query.bot.send_message(
            chat_id=offer.seller_id,
            text="‚ö°‚ö°‚ö° <b>–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –ø—Ä–∏–Ω—è–ª–∏</b>\n"
                 f"–£—á–µ–Ω–∏–∫ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {offer.subject.title} –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å—é {offer.cost}\n"
                 f"–ë—ã–ª –∫—É–ø–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç —Å–º–æ—Ç—Ä–∏—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é > –ø—Ä–æ–¥–∞–Ω–Ω—ã–µ —É—á–µ–Ω–∏–∫–∏!"
        )
