from models.worker import Worker
from models.lesson import Lesson, LessonStatus, Subject
from models.student import Student, StudentSellOffer
from services.user import UserType
from models.dialog import Message
from services.worker import WorkersService


async def generate_main_stats_message_text(
        template: str,
        worker: Worker,
        workers_service: WorkersService
) -> str:
    week_profit = await workers_service.get_week_profit()

    return template.format(
        user_id=worker.id,
        balance=worker.balance,
        selled_students=await workers_service.get_selled_count(),
        week_profit=str(week_profit),
        total_profit=await workers_service.get_total_profit(),
        referals_count="–°–∫–æ—Ä–æ –±—É–¥–µ—Ç...",
        meet_link=worker.meet_link or "–ê –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ —É—á–µ–Ω–∏–∫–∏ –∑–∞–π–¥—É—Ç –Ω–∞ —É—Ä–æ–∫!"
    )


def generate_lesson_data_message_text(
        template: str,
        lesson: Lesson
):
    lesson_status = {
        LessonStatus.SCHEDULED: "‚òë –ë—ã–ª –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω",
        LessonStatus.SUCCESS: "‚úÖ –ü—Ä–æ–≤–µ–¥–µ–Ω",
        LessonStatus.CANCELED: "‚ùå –û—Ç–º–µ–Ω–µ–Ω",
    }[lesson.status]

    free_label = None if not lesson.is_free else "<i>–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π</i>"

    return template.format(
        status=lesson_status,
        free_label=free_label or "",
        date=lesson.display_date,
        duration=lesson.display_duration,
        record_link=lesson.record_link or "<i>–£–ø—Å... –ó–∞–ø–∏—Å—å –Ω–µ –ø—Ä–µ–∫—Ä–µ–ø–ª–µ–Ω–∞</i>"
    )


def generate_student_main_message(template: str,
                                  next_lesson_template: str,
                                  next_lesson: Lesson,
                                  student: Student,
                                  meet_link: str = None):
    if next_lesson:
        next_lesson_template = next_lesson_template.format(
            next_lesson_date=next_lesson.display_date,
            next_lesson_subject=next_lesson.subject.title,
            next_lesson_duration=next_lesson.display_duration,
            meet_link=meet_link or "<i>–°—Å—ã–ª–∫–∏ –Ω–∞ –∑–≤–æ–Ω–æ–∫ –Ω–µ—Ç...–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º</i>"
        )

    return template.format(
        student_name=student.name,
        balance=int(student.balance),
        next_lesson=next_lesson_template
    )


def generate_subject_details_message(subject: Subject,
                                     selled_prefix: str = "") -> str:
    return f"""üìç {selled_prefix} <b>{subject.student.name} [{subject.student.city}]</b>
üìï –ü—Ä–µ–¥–º–µ—Ç ‚Äî <i>{subject.title}
üïë –°—Ç–∞–≤–∫–∞ ‚Äî {subject.rate}‚ÇΩ/—á</i>
üë§ –û —É—á–µ–Ω–∏–∫–µ ‚Äî <i>{subject.student.description or '–ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –∏–∑–≤–µ—Å—Ç–Ω–æ('}</i>

<i>{"‚Äî " + (subject.description or "–ö–∞–∂–µ—Ç—Å—è, –∑–∞–º–µ—Ç–æ–∫ –µ—â–µ –Ω–µ—Ç!")}</i>
"""


def generate_dialog_history_message(self_type: UserType, dialog: list[Message]):
    text = f""

    for message in dialog:
        self_message = str(message.sender) == str(self_type)

        print(str(message.sender), str(self_type))

        text += (f"{"‚Äî" if self_message else "üó£ ‚Äî"} "
                 f"[{message.display_sended_at}] "
                 f"<i>{message.text}</i>\n")

    return text
