from aiogram import Router
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from keyboards.inline import get_sell_approve_kb
from ..states.sales import SellStudentForm
from ..common.validators.telegram import get_validated_tid
from services.worker import WorkersService
from services.user import UserService
from ..providers import provide_model_service

router = Router(name=__name__)


@router.message(Command("sell"))
@provide_model_service(WorkersService)
async def sell_student_info(
        message: Message,
        state: FSMContext,
        workers_service: WorkersService):
    return await message.reply(
        text="<i>‚Ñπ –ü—Ä–æ–¥–∞—Ç—å —É—á–µ–Ω–∏–∫–∞ –≤—ã –º–æ–∂–µ—Ç–µ –∑–Ω–∞—è telegram id —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞, "
             "–∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–æ–¥–∞–µ—Ç–µ</i>\n\n"
             "–î–ª—è –ø—Ä–æ–¥–∞–∂–∏: –ú–µ–Ω—é > –ú–æ–∏ —É—á–µ–Ω–∏–∫–∏ > *–£—á–µ–Ω–∏–∫ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏* > "
             "–ù–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–¥–∞—Ç—å' –∏ –ø–æ—Å–ª–µ –≤–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—É—á–∞—Ç–µ–ª—è\n\n"
             "–ö–æ–≥–¥–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—å –ø—Ä–∏–º–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –ø–æ –º–µ—Ä–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —É—Ä–æ–∫–æ–≤"
             "–≤–∞–º –±—É–¥–µ—Ç –Ω–∞—á–∏—Å–ª—è—Ç—å—Å—è –æ–ø–ª–∞—Ç–∞ –Ω–∞ —Å—á–µ—Ç"
    )


@router.message(SellStudentForm.enter_recipient_id)
@provide_model_service(WorkersService)
async def enter_recipient_id(
        message: Message,
        state: FSMContext,
        workers_service: WorkersService):
    try:
        recipient_id = get_validated_tid(telegram_id_input=message.text)
    except ValueError as validation_error:
        return await message.reply(
            text=f"‚ùå{str(validation_error)}\n\n<i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑–æ–∫!</i>"
        )
    except:
        return await message.reply(
            text=f"‚ùå–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...\n\n<i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑–æ–∫!</i>"
        )

    if not await type(workers_service)(worker_id=recipient_id).is_worker:
        return await message.reply(text="ü§∑ <b>–¢–∞–∫–æ–≥–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –Ω–µ –Ω–∞—Ö–æ–¥–∏–º, "
                                        "–µ—Å–ª–∏ —á—Ç–æ - –ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, –ø–æ–º–æ–∂–µ–º</b>")

    data = await state.get_data()

    await state.set_data(data=data | dict(recipient_id=recipient_id))

    await state.set_state(state=SellStudentForm.enter_cost)

    await message.reply("‚úÖ <b>–£–∑–Ω–∞–ª–∏</b>, –∞ –∑–∞ —Å–∫–æ–ª—å–∫–æ ‚ÇΩ –≤—ã —Ö–æ—Ç–∏—Ç–µ –µ–≥–æ –ø—Ä–æ–¥–∞—Ç—å?")


@router.message(SellStudentForm.enter_cost)
@provide_model_service(WorkersService)
async def enter_cost(
        message: Message,
        state: FSMContext,
        workers_service: WorkersService):
    try:
        cost = int(message.text.rstrip().lstrip())

        assert cost > 0, ValueError
    except:
        return await message.reply("‚ùå –ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ–º <b>—Ü–µ–ª–æ–µ</b> —á–∏—Å–ª–æ :(")

    data = await state.get_data()

    await state.set_data(data | dict(cost=cost))

    await state.set_state()

    await message.reply(
        text="‚úî –¢–∞–∫, —Ñ–æ—Ä–º—É –∑–∞–ø–æ–ª–Ω–∏–ª–∏, –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –ø—Ä–æ–¥–∞–∂—É?",
        reply_markup=get_sell_approve_kb()
    )
